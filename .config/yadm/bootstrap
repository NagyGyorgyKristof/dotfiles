#!/bin/bash

printf "=== Starting bootstrap ===\n\n"

ORIGINAL_WORKING_DIR=$(pwd)
cd $HOME

SYSTEM_TYPE=$(uname -s)

OH_MY_ZSH_CUSTOM="$HOME/custom"

if [ ! -d "$HOME/OH_MY_ZSH_CUSTOM" ]; then
        mkdir -p $HOME/custom/plugins
        mkdir -p $HOME/custom/themes    
fi

OH_MY_ZSH_ROOT="$HOME/.oh-my-zsh"
OH_MY_ZSH_CUSTOM_PLUGINS="$OH_MY_ZSH_CUSTOM/plugins"
OH_MY_ZSH_CUSTOM_THEMES="$OH_MY_ZSH_CUSTOM/themes"

YADM_SSH_URL="git@github.com:NagyGyorgyKristof/dotfiles.git"

confirm() {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
    	[yY][eE][sS]|[yY])
true
;;
*)
false
;;
esac
}

if [ "$SYSTEM_TYPE" = "Darwin" ]; then
	echo "-> macOs detected"
	echo "-> Checking system dependencies..."

    echo " -> Install Homebrew package manager"

    #Install home-brew
    if [[ $(command -v brew) == "" ]]; then
        echo " ->Installing Hombrew..."
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    else
        echo "Updating Homebrew"
        brew update
    fi

    # Install zsh
     command -v zsh > /dev/null 2>&1  &&  echo "  -> zsh installed" || {
        echo "  -> Installing zsh"
        brew install zsh
     }

    echo "-> Checking zsh dependencies..."

 # Install zsh-nvm
    if [ ! -d "$OH_MY_ZSH_CUSTOM_PLUGINS/zsh-nvm" ]; then
        echo "  -> Installing zsh-nvm..."
        git clone https://github.com/lukechilds/zsh-nvm $OH_MY_ZSH_CUSTOM_PLUGINS/zsh-nvm
    else
        echo "  -> zsh-nvm already installed"
    fi

    # Install zsh-autosuggestions
    if [ ! -d "$OH_MY_ZSH_CUSTOM_PLUGINS/zsh-autosuggestions" ]; then
        echo "  -> Installing zsh-autosuggestions..."
        git clone https://github.com/zsh-users/zsh-autosuggestions $OH_MY_ZSH_CUSTOM_PLUGINS/zsh-autosuggestions
    else
        echo "  -> zsh-autosuggestions already installed"
    fi

    # Install zsh-syntax-highlighting
    if [ ! -d "$OH_MY_ZSH_CUSTOM_PLUGINS/zsh-syntax-highlighting" ]; then
        echo "  -> Installing zsh-syntax-highlighting..."
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $OH_MY_ZSH_CUSTOM_PLUGINS/zsh-syntax-highlighting
    else
        echo "  -> zsh-syntax-highlighting already installed"
    fi

    #Install powerlevel10k
    if [ ! -d "$OH_MY_ZSH_CUSTOM/themes/powerlevel10k" ]; then
        echo "  -> Installing powerlevel10k..."
        git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $OH_MY_ZSH_CUSTOM_THEMES/powerlevel10k
    else
        echo "  -> powerlevel10k already installed"
    fi

    # Install Oh-My-Zsh
    if [ ! -f "$OH_MY_ZSH_ROOT/oh-my-zsh.sh" ]; then
    	echo "  -> Installing Oh My Zsh..." 
    	sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    else
    	echo "  -> Oh My Zsh already installed"
    fi

    echo " -> Install esential applications"

    # Install gpg
     command -v gpg > /dev/null 2>&1  &&  echo "  -> gpg installed" || {
        echo "  -> Installing gpg..."
        brew install gpg
    }

    #Install sublime-text
    if [ ! -d '/Applications/Sublime Text.app' -a ! -d "$HOME/Applications/Sublime Text.app" ]; then
    	echo "  -> Installing sublime..."
        brew cask install sublime-text
        ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /usr/local/bin/
    else 
        echo "  -> sublime already installed"
    fi

    #Install lf
    command -v lf > /dev/null 2>&1  &&  echo "  -> lf installed" || {
        echo "  -> Installing lf..."
        brew install lf
   }   

    confirm "-> Change the default shell to zsh? [y/n]" && {
        chsh -s $(which zsh)
    }

    #source macOs config
    confirm "-> Change macOs default settings? [y/n]" && {
       printf "\n  -> Updating macOs default settings\n";
       source ~/.config/osx/macos.sh
    }

    if [ -f "$HOME/.config/yadm/files.gpg" ]; then
    confirm "-> Decrypt files? [y/n]" && {
        printf "\n  -> Decrypting files...\n";
        yadm decrypt;
    }
    fi

    if [ ! "$(yadm remote get-url origin)" = "$YADM_SSH_URL" ]; then
        confirm "-> Change yadm URL to SSH? [y/n]" && {
            printf "\n  -> Updating the yadm repo origin URL\n";
            yadm remote set-url origin "$YADM_SSH_URL";
        }
    fi

       #Install iterm2
    if [ ! -d '/Applications/iTerm.app' -a ! -d "$HOME/Applications/iTerm.app" ]; then
        confirm "-> Do you want to install iterm2 ? [y/n]" && {
                echo "  -> Installing iterm2..."
                brew cask install iterm2

                echo "  -> Load preferences..."
                defaults write com.googlecode.iterm2 "PrefsCustomFolder" -string "$HOME/.config/iterm"
                defaults write com.googlecode.iterm2 "LoadPrefsFromCustomFolder" -bool true

                echo "  -> Open iterm2"
                open -a iterm
            }
        
    else 
        echo "  -> iterm2 already installed"
    fi

fi

if [ "$SYSTEM_TYPE" = "Linux" ]; then
    echo "-> Linux detected"
    echo "-> Checking system dependencies..."

    isDebian=$(grep -Ei 'debian|buntu|mint' /etc/*release)
    
    isArch=false
    if test -f "/etc/arch-release2"; then
        isArch=true
    fi

    # Install yay
    if ! command -v yay >/dev/null 2>&1; then
        if [ "$isArch" ]; then
            echo "  -> Installing yay for AUR..."
            sudo pacman -S yay
        fi
    else
        echo "  -> yay already installed..."
    fi

    # Install zsh
    if ! command -v zsh >/dev/null 2>&1; then
        confirm "  -> Install zsh? [y/n]" && {
            echo "  -> Installing zsh..."
            if [ "$isDebian" ]; then
                sudo apt install zsh
            elif [ "$isArch" ]; then
                sudo pacman -S zsh
            fi
        }
    else
        echo "  -> zsh already installed..."
    fi

    # Install vim
    if ! command -v vim >/dev/null 2>&1; then
        confirm "  -> Install vim? [y/n]" && {
            echo "  -> Installing vim..."
            if [ "$isDebian" ]; then
                sudo apt install vim-gtk3
            elif [ "$isArch" ]; then
                sudo pacman -S gvim
            fi
        }
    else
        echo "  -> vim already installed..."
    fi

    # Install go
    if ! command -v go >/dev/null 2>&1; then
        confirm "  -> Install go? [y/n]" && {
            echo "  -> Installing go..."
            if [ "$isDebian" ]; then
                sudo apt install golang-go
            elif [ "$isArch" ]; then
                sudo pacman -S go
            fi
        }
    else
        echo "  -> go already installed..."
    fi

    # Install lf
    if ! command -v lf >/dev/null 2>&1; then
        confirm "  -> Install lf? [y/n]" && {
            echo "  -> Installing lf..."
            go get -u github.com/gokcehan/lf
        }
    else
        echo "  -> lf already installed..."
    fi

    # Install gnupg
    if ! command -v gpg >/dev/null 2>&1; then
        confirm "  -> Install gnupg? [y/n]" && {
            echo "  -> Installing gnupg for gpg..."
            if [ "$isDebian" ]; then
                sudo apt install gnupg
            elif [ "$isArch" ]; then
                sudo pacman -S gnupg
            fi
        }
    else
        echo "  -> gnupg already installed..."
    fi

    # Install transmission-cli
    if ! command -v transmission-show >/dev/null 2>&1; then
        confirm "  -> Install transmission-show? [y/n]" && {
            echo "  -> Installing transmission-cli for transmission-show..."
            if [ "$isDebian" ]; then
                sudo add-apt-repository ppa:transmissionbt/ppa
                sudo apt update
                sudo apt install transmission-cli
            elif [ "$isArch" ]; then
                sudo pacman -S transmission-cli
            fi
        }
    else
        echo "  -> transmission-cli already installed..."
    fi

    # Install libarchive
    if ! command -v bsdtar >/dev/null 2>&1; then
        confirm "  -> Install libarchive? [y/n]" && {
            echo "  -> Installing libarchive for bsdtar..."
            if [ "$isDebian" ]; then
                sudo apt install libarchive-tools
            elif [ "$isArch" ]; then
                sudo pacman -S libarchive
            fi
        }
    else
        echo "  -> libarchive already installed..."
    fi

    # Install p7zip
    if ! command -v 7z >/dev/null 2>&1; then
        confirm "  -> Install p7zip? [y/n]" && {
            echo "  -> Installing p7zip for 7z..."
            if [ "$isDebian" ]; then
                sudo apt install p7zip-full
            elif [ "$isArch" ]; then
                sudo pacman -S p7zip
            fi
        }
    else
        echo "  -> p7zip already installed..."
    fi

    # Install pip
    if ! command -v pip3 >/dev/null 2>&1; then
        confirm "  -> Install pip? [y/n]" && {
            echo "  -> Installing pip..."
            if [ "$isDebian" ]; then
                sudo apt install python3-pip
            elif [ "$isArch" ]; then
                sudo pacman -S python
            fi
        }
    else
        echo "  -> python3-pip already installed..."
    fi

    # Install pygmentize
    if ! command -v pygmentize >/dev/null 2>&1; then
        confirm "  -> Install pygmentize? [y/n]" && {
            echo "  -> Installing pygmentize..."
            if [ "$isDebian" ]; then
                pip3 install Pygments
            elif [ "$isArch" ]; then
                yay -S pygmentize
            fi
        }
    else
        echo "  -> pygmentize already installed..."
    fi

    # Install chroma
    if ! command -v chroma >/dev/null 2>&1; then
        confirm "  -> Install chroma? [y/n]" && {
            echo "  -> Installing chroma..."
            if [ "$isDebian" ]; then
                sudo apt install chroma
            elif [ "$isArch" ]; then
                yay -S go-chroma
            fi
        }
    else
        echo "  -> chroma already installed..."
    fi

    # Install unzip
    if ! command -v unzip >/dev/null 2>&1; then
        confirm "  -> Install unzip? [y/n]" && {
            echo "  -> Installing unzip..."
            if [ "$isDebian" ]; then
                sudo apt install unzip
            elif [ "$isArch" ]; then
                sudo pacman -S unzip
            fi
        }
    else
        echo "  -> unzip already installed..."
    fi

    # Install mupdf
    if ! command -v mupdf >/dev/null 2>&1; then
        confirm "  -> Install mupdf? [y/n]" && {
            echo "  -> Installing mupdf..."
            if [ "$isDebian" ]; then
                sudo add-apt-repository ppa:ubuntuhandbook1/apps
                sudo apt update
                sudo apt install mupdf mupdf-tools
            elif [ "$isArch" ]; then
                sudo pacman -S mupdf
            fi
        }
    else
        echo "  -> mupdf already installed..."
    fi

    # Install fzf
    if ! command -v fzf >/dev/null 2>&1; then
        confirm "  -> Install fzf? [y/n]" && {
            echo "  -> Installing fzf..."
            if [ "$isDebian" ]; then
                sudo apt install fzf
            elif [ "$isArch" ]; then
                sudo pacman -S fzf
            fi
        }
    else
        echo "  -> fzf already installed..."
    fi

    # Install autojump
    if ! command -v autojump >/dev/null 2>&1; then
        confirm "  -> Install autojump? [y/n]" && {
            echo "  -> Installing autojump..."
            if [ "$isDebian" ]; then
                sudo apt install autojump
            elif [ "$isArch" ]; then
                yay -S autojump
            fi
        }
    else
        echo "  -> autojump already installed..."
    fi

    # Install trash-cli
    if ! command -v trash-put >/dev/null 2>&1; then
        confirm "  -> Install trash-cli? [y/n]" && {
            echo "  -> Installing trash-cli..."
            if [ "$isDebian" ]; then
                sudo apt install trash-cli
            elif [ "$isArch" ]; then
                yay -S trash-cli
            fi
        }
    else
        echo "  -> trash-cli already installed..."
    fi

    echo "-> Checking zsh dependencies..."

    # Oh-My-Zsh + Plugins + Themes

    # Create directory structure
    if [ ! -d "$OH_MY_ZSH_CUSTOM" ]; then
        echo "  -> Creating zsh directory structure..."
        mkdir -p $OH_MY_ZSH_PLUGINS
        mkdir -p $OH_MY_ZSH_THEMES
    else
        echo "  -> Oh-My-Zsh directory structure already created..."
    fi

    # Install zsh-nvm
    if [ ! -d "$OH_MY_ZSH_PLUGINS/zsh-nvm" ]; then
        echo "  -> Installing zsh-nvm..."
        git clone https://github.com/lukechilds/zsh-nvm $OH_MY_ZSH_PLUGINS/zsh-nvm
    else
        echo "  -> zsh-nvm already installed"
    fi

    # Install zsh-autosuggestions
    if [ ! -d "$OH_MY_ZSH_PLUGINS/zsh-autosuggestions" ]; then
        echo "  -> Installing zsh-autosuggestions..."
        git clone https://github.com/zsh-users/zsh-autosuggestions $OH_MY_ZSH_PLUGINS/zsh-autosuggestions
    else
        echo "  -> zsh-autosuggestions already installed"
    fi

    # Install zsh-syntax-highlighting
    if [ ! -d "$OH_MY_ZSH_PLUGINS/zsh-syntax-highlighting" ]; then
        echo "  -> Installing zsh-syntax-highlighting..."
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $OH_MY_ZSH_PLUGINS/zsh-syntax-highlighting
    else
        echo "  -> zsh-syntax-highlighting already installed"
    fi

    # Install powerlevel9k
    if [ ! -d "$OH_MY_ZSH_THEMES/powerlevel9k" ]; then
        echo "  -> Installing powerlevel9k..."
        git clone https://github.com/bhilburn/powerlevel9k.git $OH_MY_ZSH_THEMES/powerlevel9k
    else
        echo "  -> powerlevel9k already installed"
    fi

    # Install Oh-My-Zsh with unattended mode
    if [ ! -f "$OH_MY_ZSH_ROOT/oh-my-zsh.sh" ]; then
        echo "  -> Installing Oh My Zsh..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    else
        echo "  -> Oh My Zsh already installed"
    fi
fi

cd $ORIGINAL_WORKING_DIR

printf "\n=== Finished bootstrap ===\n"

osascript -e 'quit app "Terminal"'

